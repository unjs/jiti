// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > async > stdout 1`] = `"works"`;

exports[`fixtures > circular > stdout 1`] = `"a b c"`;

exports[`fixtures > data-uri > stdout 1`] = `""`;

exports[`fixtures > deps > stdout 1`] = `
"npm:config: true
npm:defu {}
npm:destr true
npm:etag: true
npm:is-installed-globally false
npm:mime: true
npm:typescript: true
npm:moment-timezone true
npm:zod: true"
`;

exports[`fixtures > env > stdout 1`] = `
"process.env true
process.env.TEST true
process.env?.TEST true
import.meta true
import.meta.env.TEST true
import.meta.env?.TEST true"
`;

exports[`fixtures > error-parse > stderr 1`] = `
[
  "Error: ParseError: Unexpected token  ",
]
`;

exports[`fixtures > error-parse > stdout 1`] = `""`;

exports[`fixtures > error-runtime > stderr 1`] = `
[
  "Error: test error",
]
`;

exports[`fixtures > error-runtime > stdout 1`] = `""`;

exports[`fixtures > esm > stdout 1`] = `
"{ utilsLib: { utils: { a: 'a', default: 'default' }, version: '123' } }
{ utils: { a: 'a', default: 'default' } }
{
  file: '<cwd>/test.js',
  dir: '<cwd>',
  'import.meta.url': 'file://<cwd>/test.js'
}"
`;

exports[`fixtures > hashbang > stdout 1`] = `"1"`;

exports[`fixtures > import-map > stdout 1`] = `"{ alias: 'alias' }"`;

exports[`fixtures > import-meta > stdout 1`] = `
"hello! { hello: 'world' }
file://<cwd>/resolve.ts
hello! custom
file://<cwd>/resolve+custom.ts
import.meta.dirname: <cwd>
import.meta.filename: <cwd>/dirname.ts"
`;

exports[`fixtures > json > stdout 1`] = `
"Imported : { test: 123 } .default: { test: 123 }
Imported with assertion : { test: 123 } .default: { test: 123 }
Required : { test: 123 } .default: { test: 123 }
Dynamic Imported : [Object: null prototype] { test: 123, default: { test: 123 } } .default: { test: 123 }"
`;

exports[`fixtures > jsx > stdout 1`] = `
"<h1>Hello, nano-jsx!</h1>
<h1>Hello, preact!</h1>
<h1>Hello, react!</h1>
<h1>Hello, vue!</h1>"
`;

exports[`fixtures > mixed > stdout 1`] = `"Mixed works for: <cwd>"`;

exports[`fixtures > native > stdout 1`] = `"[Module: null prototype] { default: { hasRequire: false } }"`;

exports[`fixtures > proto > stdout 1`] = `"exists: true"`;

exports[`fixtures > pure-esm-dep > stdout 1`] = `
"Enter Program
Enter VariableDeclaration
Enter VariableDeclarator
Enter Identifier
Enter Literal"
`;

exports[`fixtures > require-esm > stderr 1`] = `[]`;

exports[`fixtures > require-esm > stdout 1`] = `"Works!"`;

exports[`fixtures > syntax > stdout 1`] = `
"Optional chaining: undefined
Nullish coalescing: 0
Logical or assignment: 50 title is empty.
Logical nullish assignment: 50 20"
`;

exports[`fixtures > top-level-await > stdout 1`] = `"async value works from sub module"`;

exports[`fixtures > typescript > stdout 1`] = `
"Decorator metadata keys: design:type
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 1 arguments.
{
  file: '<cwd>/test.ts',
  dir: '<cwd>',
  resolve: '<cwd>/test.ts'
} [class DecoratedClass]
{
  satisfiesTest: {
    firstTest: { name: 'first', avatar: 'https://example.com/first.png' },
    secondTest: { name: 'second', avatar: [Object] },
    normalizeUserEntity: [Function: normalizeUserEntity]
  }
}
child"
`;
